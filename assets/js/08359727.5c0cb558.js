"use strict";(self.webpackChunkevcc_docs=self.webpackChunkevcc_docs||[]).push([[1827],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return m}});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=u(t),m=i,k=c["".concat(s,".").concat(m)]||c[m]||p[m]||a;return t?r.createElement(k,l(l({ref:n},d),{},{components:t})):r.createElement(k,l({ref:n},d))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,l=new Array(a);l[0]=c;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var u=2;u<a;u++)l[u]=t[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},5478:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return d},default:function(){return c}});var r=t(87462),i=t(63366),a=(t(67294),t(3905)),l=["components"],o={sidebar_position:4},s="ModBus",u={unversionedId:"reference/modbus",id:"reference/modbus",isDocsHomePage:!1,title:"ModBus",description:"Einige Ger\xe4te, wie z.b. Messger\xe4te (meters) oder Wallboxen (`chargers) werden \xfcber die sogenannte ModBus Schnittstelle angebunden und angesprochen.",source:"@site/docs/reference/modbus.md",sourceDirName:"reference",slug:"/reference/modbus",permalink:"/docs/reference/modbus",editUrl:"https://github.com/evcc-io/docs/tree/main/docs/reference/modbus.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Plugins",permalink:"/docs/reference/plugins"},next:{title:"API",permalink:"/docs/reference/api"}},d=[{value:"Physikalische Verbindung",id:"physikalische-verbindung",children:[],level:2},{value:"Logische Verbindung",id:"logische-verbindung",children:[],level:2},{value:"Manuelle Konfiguration",id:"manuelle-konfiguration",children:[],level:2}],p={toc:d};function c(e){var n=e.components,t=(0,i.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"modbus"},"ModBus"),(0,a.kt)("p",null,"Einige Ger\xe4te, wie z.b. Messger\xe4te (",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/configuration/meters#modbus"},(0,a.kt)("inlineCode",{parentName:"a"},"meters")),") oder Wallboxen (",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/configuration/chargers"},"`chargers"),") werden \xfcber die sogenannte ModBus Schnittstelle angebunden und angesprochen."),(0,a.kt)("p",null,"Die ",(0,a.kt)("inlineCode",{parentName:"p"},"meter")," Konfiguration besteht aus einer physikalischen Verbindung und dem Wert der gelesen werden soll."),(0,a.kt)("h2",{id:"physikalische-verbindung"},"Physikalische Verbindung"),(0,a.kt)("p",null,"Wenn das Ger\xe4t physikalisch \xfcber einen RS485 Adapter verbunden ist, muss ",(0,a.kt)("inlineCode",{parentName:"p"},"device")," und die Serielle Konfiguration ",(0,a.kt)("inlineCode",{parentName:"p"},"baudrate"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"comset")," angegeben werden:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Beispiel"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'source: modbus\ndevice: /dev/ttyUSB0\nbaudrate: 9600\ncomset: "8N1"\n')),(0,a.kt)("p",null,"Wenn das Ger\xe4t \xfcber eine Netzwerkverbindung (TCP/IP) angebunden ist, muss eine ",(0,a.kt)("inlineCode",{parentName:"p"},"uri")," angegeben werden:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Beispiel"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"source: modbus\nuri: 192.168.0.11:502\nid: 1 # modbus slave id\n")),(0,a.kt)("p",null,"Wenn es sich um ein Modbus RTU Ger\xe4t handelt, das \xfcber einen RS485/Ethernet Adapter angegeben ist, muss ",(0,a.kt)("inlineCode",{parentName:"p"},"rtu: true")," gesetzt werden. Die Serielle Konfiguration wird dann direkt im Adapter eingestellt."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Beispiel"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"source: modbus\nuri: 192.168.0.10:502\nid: 3 # modbus slave id\nrtu: true\n")),(0,a.kt)("h2",{id:"logische-verbindung"},"Logische Verbindung"),(0,a.kt)("p",null,"Das Ger\xe4te-",(0,a.kt)("inlineCode",{parentName:"p"},"model")," und die Slave ID ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," sind immer erforderlich:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Beispiel"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"source: modbus\nuri/device/id: ...\nmodel: sdm\nvalue: Power\nscale: -1 # floating point factor applied to result, e.g. for kW to W conversion\n")),(0,a.kt)("p",null,"Unterst\xfctzt Messger\xe4te Modelle sind identisch zu ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/volkszaehler/mbmd#supported-devices"},"MBMD"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"RTU:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ABB")," ABB A/B-Series meters"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"MPM")," Bernecker Engineering MPM3PM meters"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"DZG")," DZG Metering GmbH DVH4013 meters"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"INEPRO")," Inepro Metering Pro 380"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"JANITZA")," Janitza B-Series meters"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"SBC")," Saia Burgess Controls ALD1 and ALE3 meters"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"SDM")," Eastron SDM630"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"SDM220")," Eastron SDM220"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"SDM230")," Eastron SDM230"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"SDM72")," Eastron SDM72"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ORNO1P")," ORNO WE-514 & WE-515"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ORNO3P")," ORNO WE-516 & WE-517"))),(0,a.kt)("li",{parentName:"ul"},"TCP: Sunspec-kompatible Wechselrichter (SMA, SolarEdge, Kaco, KOSTAL, Fronius, Steca etc)")),(0,a.kt)("p",null,"Verwende ",(0,a.kt)("inlineCode",{parentName:"p"},"value")," um den Wert der vom Ger\xe4t gelesen werden soll zu definieren. Alle unterst\xfctzten Werte sind auf ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/volkszaehler/mbmd/blob/master/meters/measurements.go#L28"},"MBMD")," voreingestellt."),(0,a.kt)("p",null,"Im Falle eines SunSpec-kompatiblen Wechselrichters inverters, k\xf6nnen die zu lesenden Werte in der Form ",(0,a.kt)("inlineCode",{parentName:"p"},"model:[block:]point")," nach der SunSpec Definition angegeben werden. Zum Beispiel wird die 3-phasen DC Leistung auf dem zweiten String so konfiguriert ",(0,a.kt)("inlineCode",{parentName:"p"},"103:2:W"),"."),(0,a.kt)("h2",{id:"manuelle-konfiguration"},"Manuelle Konfiguration"),(0,a.kt)("p",null,"Falls das Modbus Ger\xe4t nicht von MBMD direkt unterst\xfctzt wird, k\xf6nnen die Modbus Register manuell konfiguriert werden:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Beispiel"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"source: modbus\nuri/device/id: ...\nregister:\n  address: 40070\n  source: holding # holding or input\n  decode: int32 # int16|32|64, uint16|32|64, float32|64 and u|int32s + float32s\nscale: -1 # floating point factor applied to result, e.g. for kW to W conversion\n")),(0,a.kt)("p",null,"Bei den ",(0,a.kt)("inlineCode",{parentName:"p"},"int32s/uint32s")," Dekodierungen wird die Wortreihenfolge vertauscht und sind z.B. bei E3/DC Ger\xe4ten n\xfctzlich."),(0,a.kt)("p",null,"Um ein Regsiter zu schreiben wird ",(0,a.kt)("inlineCode",{parentName:"p"},"type: writesingle")," verwendet, welches ein einzelnes 16bit Register (entweder ",(0,a.kt)("inlineCode",{parentName:"p"},"int")," oder ",(0,a.kt)("inlineCode",{parentName:"p"},"bool"),") schreibt. Die Kodierung ist hier immer ",(0,a.kt)("inlineCode",{parentName:"p"},"uint16"),"."))}c.isMDXComponent=!0}}]);